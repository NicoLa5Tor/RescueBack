#!/usr/bin/env python3
"""
Script de prueba para demostrar el sistema de autenticaci√≥n de hardware.
Muestra el flujo completo desde la autenticaci√≥n hasta el env√≠o de alertas.
"""

import requests
import json
import time
from datetime import datetime


class HardwareAuthTester:
    """Clase para probar el sistema de autenticaci√≥n de hardware"""
    
    def __init__(self, base_url="http://localhost:5002"):
        self.base_url = base_url
        self.token = None
        self.token_expires_at = None
        
    def test_authentication(self, hardware_nombre, empresa_nombre, sede):
        """Prueba la autenticaci√≥n de hardware"""
        print(f"\n=== PRUEBA DE AUTENTICACI√ìN ===")
        print(f"Hardware: {hardware_nombre}")
        print(f"Empresa: {empresa_nombre}")
        print(f"Sede: {sede}")
        
        url = f"{self.base_url}/api/hardware-auth/authenticate"
        payload = {
            "hardware_nombre": hardware_nombre,
            "empresa_nombre": empresa_nombre,
            "sede": sede
        }
        
        headers = {"Content-Type": "application/json"}
        
        try:
            response = requests.post(url, json=payload, headers=headers)
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Autenticaci√≥n exitosa")
                print(f"Token: {data['data']['token'][:50]}...")
                print(f"Hardware ID: {data['data']['hardware_id']}")
                print(f"Empresa ID: {data['data']['empresa_id']}")
                print(f"V√°lido por: {data['data']['valid_for_minutes']} minutos")
                print(f"Expira en: {data['data']['expires_at']}")
                
                # Guardar token para uso posterior
                self.token = data['data']['token']
                self.token_expires_at = data['data']['expires_at']
                
                return True
            else:
                data = response.json()
                print(f"‚ùå Error en autenticaci√≥n: {data.get('message', 'Error desconocido')}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return False
    
    def test_token_verification(self):
        """Prueba la verificaci√≥n del token"""
        if not self.token:
            print("‚ùå No hay token disponible para verificar")
            return False
        
        print(f"\n=== PRUEBA DE VERIFICACI√ìN DE TOKEN ===")
        
        url = f"{self.base_url}/api/hardware-auth/verify-token"
        headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.post(url, headers=headers)
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Token v√°lido")
                print(f"Hardware: {data['payload']['hardware_nombre']}")
                print(f"Empresa: {data['payload']['empresa_nombre']}")
                print(f"Sede: {data['payload']['sede']}")
                return True
            else:
                data = response.json()
                print(f"‚ùå Token inv√°lido: {data.get('message', 'Error desconocido')}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return False
    
    def test_mqtt_message_with_auth(self):
        """Prueba el env√≠o de mensaje MQTT con autenticaci√≥n"""
        if not self.token:
            print("‚ùå No hay token disponible para enviar mensaje")
            return False
        
        print(f"\n=== PRUEBA DE ENV√çO DE MENSAJE MQTT ===")
        
        url = f"{self.base_url}/api/mqtt-alerts/process"
        payload = {
            "empresa1": {
                "semaforo": {
                    "sede": "principal",
                    "alerta": "roja",
                    "ubicacion": "Cruce principal",
                    "hardware_id": "SEM001",
                    "nombre": "Semaforo001",
                    "coordenadas": {"lat": 4.6097, "lng": -74.0817},
                    "timestamp": datetime.now().isoformat()
                }
            }
        }
        
        headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.post(url, json=payload, headers=headers)
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Mensaje MQTT procesado exitosamente")
                print(f"Alerta ID: {data.get('alert_id', 'N/A')}")
                print(f"Autorizado: {data.get('autorizado', 'N/A')}")
                print(f"Estado activo: {data.get('estado_activo', 'N/A')}")
                return True
            else:
                data = response.json()
                print(f"‚ùå Error procesando mensaje: {data.get('message', 'Error desconocido')}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return False
    
    def test_active_sessions(self):
        """Prueba la obtenci√≥n de sesiones activas"""
        print(f"\n=== PRUEBA DE SESIONES ACTIVAS ===")
        
        url = f"{self.base_url}/api/hardware-auth/sessions"
        
        try:
            response = requests.get(url)
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Sesiones activas obtenidas: {data['total']}")
                
                for session in data['data']:
                    print(f"  - Hardware: {session['hardware_nombre']}")
                    print(f"    Empresa: {session['empresa_nombre']}")
                    print(f"    Sede: {session['sede']}")
                    print(f"    Autenticado: {session['authenticated_at']}")
                    print(f"    Expira: {session['expires_at']}")
                    print()
                
                return True
            else:
                data = response.json()
                print(f"‚ùå Error obteniendo sesiones: {data.get('message', 'Error desconocido')}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return False
    
    def test_system_info(self):
        """Prueba la obtenci√≥n de informaci√≥n del sistema"""
        print(f"\n=== INFORMACI√ìN DEL SISTEMA ===")
        
        url = f"{self.base_url}/api/hardware-auth/info"
        
        try:
            response = requests.get(url)
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Informaci√≥n del sistema obtenida")
                print(f"Nombre: {data['system_info']['name']}")
                print(f"Versi√≥n: {data['system_info']['version']}")
                print(f"Tiempo de expiraci√≥n: {data['system_info']['token_expiry_minutes']} minutos")
                
                print("\nEndpoints disponibles:")
                for endpoint, path in data['system_info']['endpoints'].items():
                    print(f"  - {endpoint}: {path}")
                
                print("\nFlujo de autenticaci√≥n:")
                for step in data['system_info']['authentication_flow']:
                    print(f"  {step}")
                
                return True
            else:
                data = response.json()
                print(f"‚ùå Error obteniendo informaci√≥n: {data.get('message', 'Error desconocido')}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return False
    
    def test_expired_token(self):
        """Prueba qu√© sucede cuando el token expira"""
        print(f"\n=== PRUEBA DE TOKEN EXPIRADO ===")
        print("Esperando a que el token expire...")
        
        if self.token_expires_at:
            # Nota: En un entorno real, esperar√≠as 5 minutos
            # Para pruebas, puedes usar un token manualmente expirado
            print("(En un entorno real, espere 5 minutos para que expire)")
            
            # Simular el uso de un token expirado
            time.sleep(2)  # Peque√±a pausa para simular
            print("Intentando usar token (simulaci√≥n de expiraci√≥n)")
            
            # Intentar verificar el token
            return self.test_token_verification()
        
        return False
    
    def run_full_test(self):
        """Ejecuta todas las pruebas del sistema"""
        print("üöÄ INICIANDO PRUEBAS DEL SISTEMA DE AUTENTICACI√ìN DE HARDWARE")
        print("=" * 70)
        
        # Test 1: Informaci√≥n del sistema
        self.test_system_info()
        
        # Test 2: Autenticaci√≥n exitosa
        auth_success = self.test_authentication(
            hardware_nombre="Semaforo001",
            empresa_nombre="empresa1",
            sede="principal"
        )
        
        if auth_success:
            # Test 3: Verificaci√≥n de token
            self.test_token_verification()
            
            # Test 4: Env√≠o de mensaje MQTT
            self.test_mqtt_message_with_auth()
            
            # Test 5: Sesiones activas
            self.test_active_sessions()
        
        # Test 6: Autenticaci√≥n fallida
        print(f"\n=== PRUEBA DE AUTENTICACI√ìN FALLIDA ===")
        self.test_authentication(
            hardware_nombre="HardwareInexistente",
            empresa_nombre="EmpresaInexistente",
            sede="SedeInexistente"
        )
        
        print("\n" + "=" * 70)
        print("üèÅ PRUEBAS COMPLETADAS")


def main():
    """Funci√≥n principal para ejecutar las pruebas"""
    print("Sistema de Autenticaci√≥n de Hardware - Pruebas")
    print("Aseg√∫rate de que el servidor est√© ejecut√°ndose en http://localhost:5002")
    print()
    
    tester = HardwareAuthTester()
    tester.run_full_test()


if __name__ == "__main__":
    main()
